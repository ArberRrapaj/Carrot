{
    "swagger": "2.0",
    "info": {
      "description": "Carrot is the go-to App for Gamers. You have a huge Game library, but don't know what to play? Carrot gives you a daily suggestion on what ~vitamins to take~ games to play. Your brain is not the best anymore and you can't remember the progresses you made in your games? Don't let that stop you! Carrot will show you what supervision means. Don't hesitate and jump right in!",
      "version": "0.0.1",
      "title": "Carrot",
      "termsOfService": "http://termsLinkHere/",
      "contact": {
        "email": "Arber.Rrapaj@hotmail.de"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "host": "localhost",
    "basePath": "/api",
    "tags": [
      {
        "name": "users",
        "description": "User-related stuff"
      },
      {
        "name": "games",
        "description": "Operations on games"
      },
      {
        "name": "genres",
        "description": "Operations on genres"
      },
      {
        "name": "recensions",
        "description": "Recension-related stuff"
      }
    ],
    "schemes": [
      "https",
      "http"
    ],
    "paths": {
      "/users": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Create user",
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        },
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get a list of all users",
          "description": "",
          "operationId": "getAllUser",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "/users/login": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Logs user into the system",
          "description": "",
          "operationId": "loginUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Username and Password",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Login"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          }
        }
      },
      "/users/logout": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Logs out current logged in user session",
          "description": "",
          "operationId": "logoutUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/users/{username}": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get user by user name",
          "description": "",
          "operationId": "getUserByName",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "put": {
          "tags": [
            "users"
          ],
          "summary": "Updated user",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "name that need to be updated",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Updated user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid user supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Delete user",
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/games/": {
        "post": {
          "tags": [
            "games"
          ],
          "summary": "Create game",
          "description": "This can only be done by the logged in user.",
          "operationId": "createGame",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created game object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Game"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        },
        "get": {
          "tags": [
            "games"
          ],
          "summary": "Get a list of all games",
          "description": "",
          "operationId": "getAllGames",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Game"
              }
            }
          }
        }
      },
      "/games/title/{title}": {
        "get": {
          "tags": [
            "games"
          ],
          "summary": "Get a list of all games containing the given title",
          "description": "",
          "operationId": "getAllGamess",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "title",
              "description": "Part of the title of games to fetch",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Game"
              }
            }
          }
        }
      },
      "/games/{gameID}": {
        "get": {
          "tags": [
            "games"
          ],
          "summary": "Find game by ID",
          "description": "Returns a single game",
          "operationId": "getGameById",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "gameID",
              "in": "path",
              "description": "ID of game to return",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Game"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Game not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "put": {
          "tags": [
            "games"
          ],
          "summary": "Updates a game in the Games-DB with form data",
          "description": "",
          "operationId": "updateGame",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "gameID",
              "in": "path",
              "description": "ID of game that needs to be updated",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "body",
              "description": "game object to overwrite the old one",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Game"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "carrot_auth": [
                "write:games",
                "read:games"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "games"
          ],
          "summary": "Deletes a game",
          "description": "",
          "operationId": "deleteGame",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "gameID",
              "in": "path",
              "description": "Game id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Game not found"
            }
          },
          "security": [
            {
              "carrot_auth": [
                "write:games",
                "read:games"
              ]
            }
          ]
        }
      },
      "/recensions/": {
        "post": {
          "tags": [
            "recensions"
          ],
          "summary": "Create a recension",
          "description": "This can only be done by the logged in user.",
          "operationId": "createRecension",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created Recension object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Recension"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/recensions/{recensionID}": {
        "get": {
          "tags": [
            "recensions"
          ],
          "summary": "Find recension by ID",
          "description": "Returns a single recension",
          "operationId": "getRecensionByID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "recensionID",
              "in": "path",
              "description": "ID of recension to return",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Recension"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Recension not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "put": {
          "tags": [
            "recensions"
          ],
          "summary": "Updates a Recension in the Recensions-DB with form data",
          "description": "",
          "operationId": "updateRecension",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "recensionID",
              "in": "path",
              "description": "ID of recension that needs to be updated",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Recension object to overwrite the old one",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Recension"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "carrot_auth": [
                "write:games",
                "read:games"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "recensions"
          ],
          "summary": "Deletes a recension",
          "description": "",
          "operationId": "deleteRecension",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "recensionID",
              "in": "path",
              "description": "Recension id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Recension not found"
            }
          },
          "security": [
            {
              "carrot_auth": [
                "write:games",
                "read:games"
              ]
            }
          ]
        }
      },
      "/recensions/game/{gameID}": {
        "get": {
          "tags": [
            "recensions"
          ],
          "summary": "Find recension of a game by the game's ID",
          "description": "Returns every recension matching the gameID",
          "operationId": "getRecensionByGameID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "gameID",
              "in": "path",
              "description": "ID of the wanted game",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Recension"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Recension not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        }
      },
      "/recensions/user/{userID}": {
        "get": {
          "tags": [
            "recensions"
          ],
          "summary": "Get a list of all recensions by a user",
          "description": "Returns all recension by a user",
          "operationId": "getRecensionsByUserID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "description": "ID of the user",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Recension"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Recension not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        }
      },
      "/genres": {
        "get": {
          "tags": [
            "genres"
          ],
          "summary": "Get a list of all genres",
          "description": "",
          "operationId": "getAllGenres",
          "produces": [
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Genre"
              }
            }
          }
        }
      },
      "/genres/{genreID}": {
        "get": {
          "tags": [
            "genres"
          ],
          "summary": "Find genre by ID",
          "description": "Returns a single genre",
          "operationId": "getGenreById",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "genreID",
              "in": "path",
              "description": "ID of Genre to return",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Genre"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Genre not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "put": {
          "tags": [
            "genres"
          ],
          "summary": "Updates a genre in the Genres-DB with form data",
          "description": "",
          "operationId": "updateGenre",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "genreID",
              "in": "path",
              "description": "ID of Genre that needs to be updated",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Genre object to overwrite the old one",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Genre"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          }
        },
        "delete": {
          "tags": [
            "genres"
          ],
          "summary": "Deletes a genre",
          "description": "",
          "operationId": "deleteGenre",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "genreID",
              "in": "path",
              "description": "Genre id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Genre not found"
            }
          }
        }
      },
      "/countries": {
        "get": {
          "tags": [
            "countries"
          ],
          "summary": "Get a list of all countries",
          "description": "",
          "operationId": "getAllCountries",
          "produces": [
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Country"
              }
            }
          }
        }
      }
    },
    "securityDefinitions": {
      "carrot_auth": {
        "type": "oauth2",
        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
        "flow": "implicit",
        "scopes": {
          "write:games": "modify games in your account",
          "read:games": "read your games"
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "definitions": {
      "Game": {
        "type": "object",
        "properties": {
          "GameID": {
            "type": "integer",
            "format": "int64"
          },
          "GenreID": {
            "type": "integer",
            "format": "int64"
          },
          "Title": {
            "type": "string",
            "description": "Title of the game"
          },
          "Publisher": {
            "type": "string",
            "description": "Publisher of the game"
          },
          "Released": {
            "type": "integer",
            "format": "int32"
          },
          "Image": {
            "type": "string",
            "description": "Image in blob-form"
          }
        },
        "xml": {
          "name": "Game"
        }
      },
      "Genre": {
        "type": "object",
        "properties": {
          "GenreID": {
            "type": "integer",
            "format": "int64"
          },
          "GenreName": {
            "type": "string",
            "description": "Name of the genre"
          }
        },
        "xml": {
          "name": "Genre"
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "integer",
            "format": "int64"
          },
          "CountryCode": {
            "type": "string",
            "description": "The country code of the according country"
          },
          "CountryName": {
            "type": "string",
            "description": "The country's name"
          }
        },
        "xml": {
          "name": "Country"
        }
      },
      "Level": {
        "type": "object",
        "properties": {
          "LevelID": {
            "type": "integer",
            "description": "ID of the level"
          },
          "GameID": {
            "type": "integer",
            "description": "ID of the game"
          },
          "Name": {
            "type": "string",
            "description": "Name of the game"
          },
          "Image": {
            "type": "string",
            "description": "An image which shows you a preview of the level"
          }
        },
        "xml": {
          "name": "Level"
        }
      },
      "Recension": {
        "type": "object",
        "properties": {
          "RecensionID": {
            "type": "integer",
            "description": "RecensionID"
          },
          "UserID": {
            "type": "integer",
            "description": "The User's ID"
          },
          "GameID": {
            "type": "integer",
            "description": "GameId"
          },
          "Text": {
            "type": "string"
          },
          "Rating": {
            "type": "integer",
            "format": "1-10"
          }
        },
        "xml": {
          "name": "Recension"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer",
            "format": "int64"
          },
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string",
            "format": "hashed"
          },
          "FirstName": {
            "type": "string"
          },
          "CountryID": {
            "type": "integer",
            "description": "CountryId"
          },
          "Image": {
            "type": "string"
          },
          "Start": {
            "type": "string",
            "format": "date",
            "description": "Date the user started gaming"
          },
          "FavouriteGameID": {
            "type": "integer",
            "format": "GameId"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Library": {
        "type": "object",
        "properties": {
          "LibraryID": {
            "type": "integer",
            "description": "LibraryID"
          },
          "UserID": {
            "type": "integer",
            "description": "UserID"
          },
          "GameID": {
            "type": "integer",
            "description": "GameID"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Progress": {
        "type": "object",
        "properties": {
          "ProgressID": {
            "type": "integer",
            "description": "ProgressID"
          },
          "UserID": {
            "type": "integer",
            "description": "UserID"
          },
          "GameID": {
            "type": "integer",
            "description": "GameID"
          },
          "LevelID": {
            "type": "integer",
            "description": "LevelID"
          },
          "Completed": {
            "type": "boolean",
            "description": "Completed or not"
          }
        },
        "xml": {
          "name": "Progress"
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }