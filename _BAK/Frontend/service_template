import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';


import { CLASS } from '../../classes/CLASS';
import { ErrorService } from '../error/error.service';
import { NotificationService } from '../notification/notification.service';

const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};
/**
 * PLURAL
 * CLASS
 * pLURAL
 * SINGULAR
 * sINGULAR
 */
@Injectable({
  providedIn: 'root'
})
export class SINGULARService {
  private pLURALUrl = 'localhost:3000/api/pLURAL';  // URL to web api

  constructor(private http: HttpClient,
    private notificationService: NotificationService,
    private errorService: ErrorService) { }



  getPLURAL (): Observable<CLASS[]> {
    return this.http.get<CLASS[]>(this.pLURALUrl)
      .pipe(
        // tap(pLURAL => this.notificationService.log('Successfully loaded pLURAL')),
        catchError(this.errorService.handleError('Fetching PLURAL', []))
      );
  }

  getSINGULAR(id: number): Observable<CLASS> {
    const url = `${this.pLURALUrl}/${id}`;

    return this.http.get<CLASS>(url).pipe(
      // tap(sINGULAR => this.notificationService.log('Successfully loaded SINGULAR')),
      catchError(this.errorService.handleError<CLASS>('Fetching SINGULAR'))
    );
  }

  searchPLURAL(term: string): Observable<CLASS[]> {
    if (!term.trim()) { return of([]); } // if not search term, return empty CLASS array.

    return this.http.get<CLASS[]>(`${this.pLURALUrl}/${term}`).pipe(
      // tap(pLURAL => this.notificationService.log('Succesfully loaded matching pLURAL')),
      catchError(this.errorService.handleError<CLASS[]>('Fetching matching pLURAL', []))
    );
  }



  addSINGULAR (sINGULAR: SINGULAR): Observable<String> {
    return this.http.post<String>(this.pLURALUrl, sINGULAR, httpOptions).pipe(
      // tap((sINGULAR: string) => this.notificationService.log(sINGULAR)),
      catchError(this.errorService.handleError<String>('Adding SINGULAR'))
    );
  }


  deleteSINGULAR (sINGULAR: CLASS | number): Observable<String> {
    const id = typeof sINGULAR === 'number' ? sINGULAR : sINGULAR.SINGULARID;
    const url = `${this.pLURALUrl}/${id}`;

    return this.http.delete<String>(url, httpOptions).pipe(
      // tap(_ => this.notificationService.log('Successfully deleted SINGULAR')),
      catchError(this.errorService.handleError<String>('Deleting SINGULAR'))
    );
  }

  updateSINGULAR (sINGULAR: CLASS): Observable<String> {
    return this.http.put(this.pLURALUrl, sINGULAR, httpOptions).pipe(
      // tap(_ => this.notificationService.log('Successfully updated SINGULAR')),
      catchError(this.errorService.handleError<any>('Updating SINGULAR'))
    );
  }
}
